name: AI PR Summary with Mistral

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare diff
        id: prepare-diff
        run: |
          RAW_DIFF=$(git diff -U3 ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})

          CLEAN_DIFF=$(echo "$RAW_DIFF" \
            | grep -v -E '^(diff --git|index|+++|---|@@)' \
            | head -c 6000 \
            | sed 's/"/\\"/g')

          if [[ -z "$CLEAN_DIFF" || ${#CLEAN_DIFF} -lt 20 ]]; then
            echo "SKIP_SUMMARY=true" >> $GITHUB_OUTPUT
          else
            echo "DIFF_CONTENT<<EOF" >> $GITHUB_ENV
            echo "$CLEAN_DIFF" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "SKIP_SUMMARY=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate summary
        if: steps.prepare-diff.outputs.SKIP_SUMMARY == 'false'
        id: generate-summary
        env:
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          DIFF_CONTENT: ${{ env.DIFF_CONTENT }}
        run: |
          PROMPT=$(cat <<EOF
          Analyze these code changes for a GitHub pull request and provide:
          1. **Purpose**: One sentence describing the main goal
          2. **Changes**: 3-5 specific technical modifications
          3. **Impact**: Potential effects on the system

          Diff:
          $DIFF_CONTENT
          EOF
          )

          REQUEST_JSON=$(jq -n \
            --arg prompt "$PROMPT" \
            '{
              model: "mistral-medium-latest",
              messages: [
                {
                  role: "system",
                  content: "You are a senior engineer analyzing GitHub PRs. Respond with clean markdown using only the requested sections."
                },
                {
                  role: "user",
                  content: $prompt
                }
              ],
              temperature: 0.2,
              max_tokens: 600
            }')

          echo "Calling Mistral API..."
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $MISTRAL_API_KEY" \
            -d "$REQUEST_JSON" \
            https://api.mistral.ai/v1/chat/completions)

          echo "Raw API Response: $RESPONSE"

          if ! echo "$RESPONSE" | jq -e '.choices[0].message.content' > /dev/null; then
            echo "Error: Unexpected API response format"
            exit 1
          fi

          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "### ðŸ¤– AI-Powered PR Analysis" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post summary comment
        if: steps.prepare-diff.outputs.SKIP_SUMMARY == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ steps.generate-summary.outputs.summary }}

            _Generated at $(date -u +'%Y-%m-%d %H:%M UTC') using Mistral AI_
          edit-mode: replace

      - name: Post fallback comment
        if: steps.prepare-diff.outputs.SKIP_SUMMARY == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ðŸ¤– _AI summary skipped_: No significant code changes detected in this PR.
